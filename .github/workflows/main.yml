name: Deploy to Amazon ECS (Terraform-managed)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_env:
        description: "Environment to deploy to"
        required: true
        default: "production"

env:
  AWS_REGION: eu-north-1
  AWS_ROLE_ARN: arn:aws:iam::930900578129:role/github-actions-role
  ECR_REPOSITORY: juice-shop-repo
  ECS_CLUSTER: app-fargate-cluster
  ECS_SERVICE: app-fargate-service
  CONTAINER_NAME: juice-shop

permissions:
  id-token: write
  contents: read

# Avoid overlapping deploys *per environment/branch*
concurrency:
  group: ecs-deploy-${{ github.ref }}-${{ github.event.inputs.deploy_env || 'production' }}
  cancel-in-progress: false

jobs:
  build_and_push:
    name: Build & Push Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I (debug)
        run: aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repository exists
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_REPOSITORY }}" >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name "${{ env.ECR_REPOSITORY }}" >/dev/null

      - name: Extract Docker metadata (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=raw,value=${{ github.sha }}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:buildcache
          cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:buildcache,mode=max

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build_and_push
    if: ${{ needs.build_and_push.result == 'success' }}
    environment:
      name: ${{ github.event.inputs.deploy_env || 'production' }}
    steps:
      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Force ECS service deployment
        run: |
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service "${{ env.ECS_SERVICE }}" \
            --force-new-deployment

      - name: Wait for service stable (optional but recommended)
        run: |
          aws ecs wait services-stable \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}"