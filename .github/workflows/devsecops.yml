name: DevSecOps Scans

on:
  push: { branches: ["master"] }
  pull_request: { branches: ["master"] }

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  gitleaks:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gitleaks/gitleaks-action@v2
        with: { args: --redact }
        continue-on-error: true

  semgrep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: returntocorp/semgrep-action@v1
        with:
          config: p/owasp-top-ten p/ci p/nodejs p/javascript
          generateSarif: "true"
          auditOn: push
        continue-on-error: true
      - if: always()
        uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: semgrep.sarif }
        continue-on-error: true

  trivy_fs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: sarif
          output: trivy-fs.sarif
          security-checks: vuln,secret,config
          severity: HIGH,CRITICAL
          exit-code: 0
        continue-on-error: true
      - if: always()
        uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: trivy-fs.sarif }
        continue-on-error: true

  checkov_hadolint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: dockerfile,compose
          output_format: sarif
          output_file_path: checkov.sarif
          soft_fail: true
        continue-on-error: true
      - if: always()
        uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: checkov.sarif }
        continue-on-error: true
      - name: Hadolint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with: { dockerfile: Dockerfile }
        continue-on-error: true

  dast_zap:
    runs-on: ubuntu-latest
    steps:
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.13.0
        with:
          target: ${{ secrets.STAGING_URL }}
          cmd_options: "-a -m 5 -r zap-report.html"
        continue-on-error: true
      - name: Ensure report exists
        run: |
          [ -f zap-report.html ] || echo "ZAP report not generated" > zap-report.html
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with: { name: zap-report, path: zap-report.html }
