name: DevSecOps Scans
on:
  push: { branches: ["master"] }
  pull_request: { branches: ["master"] }
permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  gitleaks:
    runs-on: ubuntu-latest
    outputs: { gate_fail: ${{ steps.eval.outputs.fail }} }
    steps:
      - uses: actions/checkout@v4
      - uses: gitleaks/gitleaks-action@v2
        with: { args: --redact --report-format sarif --report-path gitleaks.sarif }
        continue-on-error: true
      - id: eval
        run: |
          if [ -f gitleaks.sarif ]; then CNT=$(jq '[.runs[].results[]] | length' gitleaks.sarif); else CNT=0; fi
          echo "fail=$([ "${CNT:-0}" -gt 0 ] && echo 1 || echo 0)" >> $GITHUB_OUTPUT

  semgrep:
    runs-on: ubuntu-latest
    outputs: { gate_fail: ${{ steps.eval.outputs.fail }} }
    steps:
      - uses: actions/checkout@v4
      - uses: returntocorp/semgrep-action@v1
        with: { config: p/owasp-top-ten p/ci p/nodejs p/javascript, generateSarif: "true", auditOn: push }
        continue-on-error: true
      - if: always()
        uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: semgrep.sarif }
      - id: eval
        run: |
          if [ -f semgrep.sarif ]; then
            HC=$(jq '[.runs[]?.results[]? | select((.properties.severity//""|ascii_upcase)=="HIGH" or (.properties.severity//""|ascii_upcase)=="CRITICAL" or (.level//""|ascii_downcase)=="error")] | length' semgrep.sarif)
          else HC=0; fi
          echo "fail=$([ "${HC:-0}" -gt 0 ] && echo 1 || echo 0)" >> $GITHUB_OUTPUT

  trivy_fs:
    runs-on: ubuntu-latest
    outputs: { gate_fail: ${{ steps.eval.outputs.fail }} }
    steps:
      - uses: actions/checkout@v4
      - uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: sarif
          output: trivy-fs.sarif
          security-checks: vuln,secret,config
          severity: HIGH,CRITICAL
          exit-code: 0
        continue-on-error: true
      - if: always()
        uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: trivy-fs.sarif }
      - id: eval
        run: |
          if [ -f trivy-fs.sarif ]; then CNT=$(jq '[.runs[].results[]] | length' trivy-fs.sarif); else CNT=0; fi
          echo "fail=$([ "${CNT:-0}" -gt 0 ] && echo 1 || echo 0)" >> $GITHUB_OUTPUT

  checkov_hadolint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: bridgecrewio/checkov-action@v12
        with: { directory: ., framework: dockerfile,compose, output_format: sarif, output_file_path: checkov.sarif, soft_fail: true }
      - if: always()
        uses: github/codeql-action/upload-sarif@v3
        with: { sarif_file: checkov.sarif }
      - name: Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with: { dockerfile: Dockerfile }
        continue-on-error: true

  dast_zap:
    runs-on: ubuntu-latest
    steps:
      - name: ZAP Baseline
        uses: zaproxy/action-baseline@v0.13.0
        with: { target: ${{ secrets.STAGING_URL }}, cmd_options: "-a -m 5 -r zap-report.html" }
        continue-on-error: true
      - run: '[ -f zap-report.html ] || echo "ZAP report not generated" > zap-report.html'
      - uses: actions/upload-artifact@v4
        with: { name: zap-report, path: zap-report.html }

  security_gate:
    runs-on: ubuntu-latest
    needs: [gitleaks, semgrep, trivy_fs, checkov_hadolint, dast_zap]
    steps:
      - run: |
          echo "GITLEAKS=${{ needs.gitleaks.outputs.gate_fail }}"
          echo "SEMGREP=${{ needs.semgrep.outputs.gate_fail }}"
          echo "TRIVY=${{ needs.trivy_fs.outputs.gate_fail }}"
          FAILS=0
          [ "${{ needs.gitleaks.outputs.gate_fail }}" = "1" ] && FAILS=1
          [ "${{ needs.semgrep.outputs.gate_fail }}" = "1" ] && FAILS=1
          [ "${{ needs.trivy_fs.outputs.gate_fail }}" = "1" ] && FAILS=1
          if [ $FAILS -eq 1 ]; then echo "Security gate FAILED"; exit 1; else echo "Security gate PASSED"; fi

  render_deploy:
    runs-on: ubuntu-latest
    needs: security_gate
    if: github.ref == 'refs/heads/master' && needs.security_gate.result == 'success'
    steps:
      - name: Trigger Render Deploy
        run: curl -fsS -X POST "${{ secrets.RENDER_DEPLOY_HOOK_URL }}"
