name: DevSecOps Scans

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  gitleaks:
    name: Secrets scan (Gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: gitleaks/gitleaks-action@v2
        with:
          args: --redact

  semgrep:
    name: SAST (Semgrep)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: returntocorp/semgrep-action@v1
        with:
          config: p/owasp-top-ten p/ci p/nodejs p/javascript
          generateSarif: "true"
          auditOn: push
      - name: Upload SARIF (Semgrep)
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif

  trivy_fs:
    name: Trivy FS (vuln+secrets+config)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.24.0
        with:
          scan-type: fs
          ignore-unfixed: true
          format: sarif
          output: trivy-fs.sarif
          security-checks: vuln,secret,config
          severity: HIGH,CRITICAL
          exit-code: 0
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-fs.sarif

  checkov_hadolint:
    name: IaC/Docker checks (Checkov/Hadolint)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Checkov (Dockerfile/Compose)
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: dockerfile,compose
          output_format: sarif
          output_file_path: checkov.sarif
          soft_fail: true
      - uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif
      - name: Hadolint Dockerfile
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
        continue-on-error: true

  wait_staging:
    name: Wait for staging URL
    runs-on: ubuntu-latest
    needs: [gitleaks, semgrep, trivy_fs, checkov_hadolint]
    if: github.ref == 'refs/heads/master'
    steps:
      - name: Ping STAGING_URL until 200/301/302
        run: |
          for i in {1..30}; do
            CODE=$(curl -s -o /dev/null -w "%{http_code}" "${{ secrets.STAGING_URL }}")
            echo "try $i: HTTP $CODE"
            if [ "$CODE" = "200" ] || [ "$CODE" = "301" ] || [ "$CODE" = "302" ]; then
              exit 0
            fi
            sleep 10
          done
          echo "Staging is not responding in time"; exit 1

  dast_zap:
    name: DAST (ZAP Baseline)
    runs-on: ubuntu-latest
    needs: wait_staging
    if: github.ref == 'refs/heads/master'
    steps:
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.13.0
        with:
          target: ${{ secrets.STAGING_URL }}
          cmd_options: "-a -m 5 -r zap-report.html"
      - name: Upload ZAP report
        uses: actions/upload-artifact@v4
        with:
          name: zap-report
          path: zap-report.html
