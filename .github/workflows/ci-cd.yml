name: CI/CD to ECS

on:
  push:
    branches: [ master ]

env:
  AWS_REGION: eu-north-1
  AWS_ROLE_ARN: arn:aws:iam::930900578129:role/juice-shop-github-deploy
  ECR_REPOSITORY: my-app-repo
  ECS_CLUSTER: my-app-cluster
  ECS_SERVICE: my-app-service

permissions:
  id-token: write
  contents: read
  security-events: write   # needed for SARIF upload

concurrency:
  group: ecs-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ---------------------------
  # Build -> Scan -> Push (always)
  # ---------------------------
  build_scan_push:
    runs-on: ubuntu-latest
    outputs:
      registry: ${{ steps.ecr.outputs.registry }}
      image_tag: ${{ steps.meta.outputs.image_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I
        run: aws sts get-caller-identity

      - name: Build Docker image (local)
        run: |
          docker build -t app:${{ github.sha }} -t app:latest .

      # ---- Trivy BEFORE push ----
      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: trivy-db-${{ runner.os }}-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            trivy-db-${{ runner.os }}-

      - name: Trivy Image Scan (table, non-blocking)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: app:${{ github.sha }}
          format: table
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 0   # <— push anyway; set to 1 to break on HIGH/CRITICAL

      - name: Trivy Image Scan (SARIF)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: image
          image-ref: app:${{ github.sha }}
          format: sarif
          output: trivy-image.sarif
          severity: HIGH,CRITICAL
          ignore-unfixed: true
          exit-code: 0

      - name: Upload SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-image.sarif

      # ---- Push to ECR ----
      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag image for ECR
        id: meta
        run: |
          REG="${{ steps.ecr.outputs.registry }}"
          TAG="${{ github.sha }}"
          docker tag app:${TAG} "$REG/${{ env.ECR_REPOSITORY }}:${TAG}"
          docker tag app:latest   "$REG/${{ env.ECR_REPOSITORY }}:latest"
          echo "image_tag=${TAG}" >> "$GITHUB_OUTPUT"

      - name: Push image
        run: |
          REG="${{ steps.ecr.outputs.registry }}"
          TAG="${{ steps.meta.outputs.image_tag }}"
          docker push "$REG/${{ env.ECR_REPOSITORY }}:${TAG}"
          docker push "$REG/${{ env.ECR_REPOSITORY }}:latest"

  # ---------------------------
  # Manual-approval Deploy
  # ---------------------------
  deploy:
    runs-on: ubuntu-latest
    needs: build_scan_push
    environment:
      name: production   # set reviewers in Settings → Environments → production
      url: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Show GitHub context
        run: |
          echo "repo=${{ github.repository }}"
          echo "ref=${{ github.ref }}"
          echo "event=${{ github.event_name }}"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Who am I
        run: aws sts get-caller-identity

      - name: Force ECS service deployment
        run: |
          aws ecs update-service \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --service "${{ env.ECS_SERVICE }}" \
            --force-new-deployment \
            --region "${{ env.AWS_REGION }}"

      - name: Wait for service stability
        run: |
          aws ecs wait services-stable \
            --cluster "${{ env.ECS_CLUSTER }}" \
            --services "${{ env.ECS_SERVICE }}" \
            --region "${{ env.AWS_REGION }}"