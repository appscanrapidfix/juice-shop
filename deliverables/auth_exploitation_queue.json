{
  "vulnerabilities": [
    {
      "ID": "AUTH-VULN-01",
      "vulnerability_type": "IDOR",
      "source_endpoint": "GET /rest/basket/:id",
      "vulnerable_code_location": "routes/basket.ts:21-24",
      "missing_defense": "Missing ownership check - user.bid comparison uses != instead of strict !== and lacks proper validation flow",
      "exploitation_hypothesis": "Sending a GET request to /rest/basket/{other_user_basket_id} while authenticated will successfully retrieve another user's basket data by bypassing the loose comparison validation",
      "confidence": "high",
      "notes": "Basket IDs are sequential integers, making enumeration trivial. The loose comparison (!=) in the validation logic may allow bypasses."
    },
    {
      "ID": "AUTH-VULN-02", 
      "vulnerability_type": "IDOR",
      "source_endpoint": "GET /rest/memories",
      "vulnerable_code_location": "routes/memories.ts:18-22",
      "missing_defense": "No userId filtering in database query - exposes all users' private photos and memories",
      "exploitation_hypothesis": "A GET request to /rest/memories while authenticated will return photo memories from all users instead of just the authenticated user's memories",
      "confidence": "high",
      "notes": "Complete privacy breach - returns sensitive personal photos from all users without any access control filtering."
    },
    {
      "ID": "AUTH-VULN-03",
      "vulnerability_type": "Vertical_Privilege_Escalation", 
      "source_endpoint": "POST /api/Users",
      "vulnerable_code_location": "server.ts:496-503 and models/user.ts:84",
      "missing_defense": "No role validation during user registration - allows direct admin role injection",
      "exploitation_hypothesis": "Sending a POST request to /api/Users with role: 'admin' in the request body will successfully create a user account with administrative privileges",
      "confidence": "high",
      "notes": "The registerAdminChallenge middleware only tracks challenge completion but doesn't prevent role assignment. User model validation allows admin role."
    },
    {
      "ID": "AUTH-VULN-04",
      "vulnerability_type": "Authentication_Bypass",
      "source_endpoint": "POST /rest/user/login",
      "vulnerable_code_location": "routes/login.ts:34",
      "missing_defense": "SQL injection vulnerability allows authentication bypass via email parameter manipulation",
      "exploitation_hypothesis": "Sending a POST request to /rest/user/login with email containing SQL injection payload like 'admin@juice-sh.op'--' will bypass password authentication and grant admin access",
      "confidence": "high", 
      "notes": "Raw SQL query concatenation enables SQL injection authentication bypass. This was confirmed by the SQLi specialist and affects admin login directly."
    },
    {
      "ID": "AUTH-VULN-05",
      "vulnerability_type": "Authentication_Bypass",
      "source_endpoint": "ANY authenticated endpoint",
      "vulnerable_code_location": "lib/insecurity.ts:23, 57-58",
      "missing_defense": "Hardcoded RSA private keys enable JWT token forgery and algorithm confusion attacks",
      "exploitation_hypothesis": "Forging a JWT token using the hardcoded private key with admin role or exploiting algorithm confusion (RS256 to HS256) will grant unauthorized access to any protected endpoint",
      "confidence": "high",
      "notes": "Private key is exposed in source code. Application vulnerable to 'none' algorithm and HS256 algorithm confusion attacks as evidenced by JWT challenges."
    },
    {
      "ID": "AUTH-VULN-06",
      "vulnerability_type": "Session_Management_Flaw",
      "source_endpoint": "POST /logout (client-side)",
      "vulnerable_code_location": "frontend/src/app/navbar/navbar.component.ts:207-215",
      "missing_defense": "No server-side session invalidation - tokens remain valid in tokenMap after logout",
      "exploitation_hypothesis": "After a user logs out, their JWT token will continue to work for API requests because the server-side tokenMap is never cleared, enabling session replay attacks",
      "confidence": "high",
      "notes": "Logout only clears client-side localStorage but never invalidates server-side sessions. Enables post-logout token reuse."
    },
    {
      "ID": "AUTH-VULN-07",
      "vulnerability_type": "Business_Logic_Flaw",
      "source_endpoint": "POST /rest/basket/:id/checkout", 
      "vulnerable_code_location": "routes/order.ts:136-147",
      "missing_defense": "Allows negative order totals resulting in the shop paying customers instead of charging them",
      "exploitation_hypothesis": "Creating an order with manipulated coupon codes to achieve a negative total will result in the application crediting money to the user's wallet instead of charging them",
      "confidence": "med",
      "notes": "The negativeOrderChallenge explicitly allows negative totals. Requires manipulation of coupon system or basket items to achieve negative pricing."
    },
    {
      "ID": "AUTH-VULN-08",
      "vulnerability_type": "Business_Logic_Flaw",
      "source_endpoint": "POST /rest/deluxe-membership",
      "vulnerable_code_location": "routes/deluxe.ts:44-46", 
      "missing_defense": "Payment validation only checks for 'wallet' and 'card' modes, allowing bypass with any other value",
      "exploitation_hypothesis": "Sending a POST request to /rest/deluxe-membership with paymentMode set to 'cash' or any invalid value will grant deluxe membership without the $49 payment",
      "confidence": "high",
      "notes": "The freeDeluxeChallenge reward requires authentication but accepts any paymentMode that isn't 'wallet' or 'card'."
    },
    {
      "ID": "AUTH-VULN-09",
      "vulnerability_type": "Vertical_Privilege_Escalation",
      "source_endpoint": "GET /rest/admin/application-configuration",
      "vulnerable_code_location": "server.ts:584-585",
      "missing_defense": "Admin endpoints completely lack access control middleware despite isAdmin function being referenced elsewhere",
      "exploitation_hypothesis": "Any user can send a GET request to /rest/admin/application-configuration and /rest/admin/application-version to access sensitive administrative information without authentication",
      "confidence": "high", 
      "notes": "Critical infrastructure endpoints with no protection. The isAdmin middleware function doesn't exist in the codebase despite being referenced in codefix files."
    },
    {
      "ID": "AUTH-VULN-10",
      "vulnerability_type": "IDOR",
      "source_endpoint": "POST /api/BasketItems",
      "vulnerable_code_location": "routes/basketItems.ts:45,69",
      "missing_defense": "Insufficient validation allows users to add items to other users' baskets by manipulating BasketId parameter", 
      "exploitation_hypothesis": "Sending a POST request to /api/BasketItems with a different user's BasketId will successfully add items to their basket, enabling basket manipulation attacks",
      "confidence": "med",
      "notes": "The basketManipulateChallenge indicates this vulnerability is intentional. Requires valid basketId enumeration but validation exists and may be bypassable."
    }
  ]
}