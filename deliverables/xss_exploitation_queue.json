{
  "vulnerabilities": [
    {
      "ID": "XSS-VULN-01",
      "vulnerability_type": "Stored",
      "source": "POST body field: 'comment' in feedback submission form",
      "path": "/api/Feedbacks → models/feedback.ts sanitization → database storage → frontend rendering",
      "sink_function": "Angular [innerHTML] binding in administration.component.html:58, feedback-details.component.html:19, about.component.html:46",
      "render_context": "HTML_BODY",
      "encoding_observed": "security.sanitizeHtml() (single-pass only) when persistedXssFeedbackChallenge enabled, security.sanitizeSecure() (recursive) when disabled",
      "verdict": "vulnerable",
      "mismatch_reason": "When persistedXssFeedbackChallenge is enabled, single-pass sanitization allows nested HTML tag bypass: <<script>Foo</script>iframe becomes <iframe> after sanitization",
      "witness_payload": "<<script>Foo</script>iframe src=\"javascript:alert(`xss`)\"",
      "confidence": "high",
      "notes": "Challenge-dependent vulnerability. Angular sanitizer explicitly bypassed in about.component.ts:122-124. Affects admin panel and user-facing feedback display."
    },
    {
      "ID": "XSS-VULN-02", 
      "vulnerability_type": "DOM-based",
      "source": "URL parameter: ?q in search functionality",
      "path": "URL query parameter → Angular route.snapshot.queryParams.q → bypassSecurityTrustHtml() → [innerHTML] binding",
      "sink_function": "Angular [innerHTML] binding via bypassSecurityTrustHtml() in search-result.component.ts:159",
      "render_context": "HTML_BODY",
      "encoding_observed": "None - Angular sanitizer explicitly bypassed",
      "verdict": "vulnerable",
      "mismatch_reason": "Angular's built-in XSS protection is intentionally bypassed using bypassSecurityTrustHtml(), allowing direct HTML injection",
      "witness_payload": "<img src=x onerror=alert('DOM_XSS_TEST')>",
      "confidence": "high",
      "notes": "Successfully tested and confirmed working. Part of Local XSS Challenge. No authentication required."
    },
    {
      "ID": "XSS-VULN-03",
      "vulnerability_type": "Reflected",
      "source": "URL parameter: ?callback in JSONP endpoint",
      "path": "/rest/user/whoami?callback → req.query.callback → res.jsonp() response",
      "sink_function": "Express.js res.jsonp() method in routes/currentUser.ts:27",
      "render_context": "JAVASCRIPT_STRING",
      "encoding_observed": "None - direct callback parameter usage",
      "verdict": "vulnerable", 
      "mismatch_reason": "No validation or sanitization applied to callback parameter before inclusion in JavaScript response",
      "witness_payload": "alert('XSS')//",
      "confidence": "high",
      "notes": "Enables cross-domain information disclosure. Email addresses and profile data can be exfiltrated. Part of Email Leak Challenge."
    },
    {
      "ID": "XSS-VULN-04",
      "vulnerability_type": "Stored",
      "source": "POST body field: 'email' in user registration/profile",
      "path": "/api/Users → models/user.ts conditional sanitization → database → profile rendering",
      "sink_function": "Server-side Pug template direct substitution in userProfile.pug:45",
      "render_context": "HTML_BODY",
      "encoding_observed": "security.sanitizeSecure() when persistedXssUserChallenge disabled, no sanitization when enabled",
      "verdict": "vulnerable",
      "mismatch_reason": "When persistedXssUserChallenge is enabled, no sanitization is applied to email field allowing direct HTML injection",
      "witness_payload": "<iframe src=\"javascript:alert(`xss`)\">",
      "confidence": "high",
      "notes": "Challenge-dependent vulnerability. Affects user profile pages and potentially other user display contexts."
    },
    {
      "ID": "XSS-VULN-05",
      "vulnerability_type": "Stored",
      "source": "POST body field: 'username' in profile updates",
      "path": "Profile update → routes/userProfile.ts SSTI processing → eval() execution",
      "sink_function": "Direct eval() execution in routes/userProfile.ts:62",
      "render_context": "JAVASCRIPT_STRING",
      "encoding_observed": "security.sanitizeLegacy() when usernameXssChallenge enabled (bypassable regex)",
      "verdict": "vulnerable",
      "mismatch_reason": "Server-Side Template Injection allows Node.js code execution via eval() when username contains #{...} syntax",
      "witness_payload": "#{global.process.mainModule.require('child_process').exec('id')}",
      "confidence": "high",
      "notes": "CRITICAL: Remote code execution capability, not just XSS. Requires usernameXssChallenge enabled and specific CSP bypass conditions."
    },
    {
      "ID": "XSS-VULN-06",
      "vulnerability_type": "Stored", 
      "source": "Product description data from backend API",
      "path": "Product API data → search-result.component.ts:133 → bypassSecurityTrustHtml() → [innerHTML] binding",
      "sink_function": "Angular [innerHTML] binding in product-details.component.html:16",
      "render_context": "HTML_BODY",
      "encoding_observed": "None - Angular sanitizer explicitly bypassed",
      "verdict": "vulnerable",
      "mismatch_reason": "Product descriptions are rendered with bypassed Angular sanitization, allowing stored XSS if admin creates malicious product",
      "witness_payload": "<script>alert('product_xss')</script>",
      "confidence": "high",
      "notes": "Requires admin privileges to create malicious products. Affects all users viewing product details."
    },
    {
      "ID": "XSS-VULN-07",
      "vulnerability_type": "DOM-based",
      "source": "User data from backend API in data export",
      "path": "Backend user data → data-export.component.ts:68 → document.write() in new window",
      "sink_function": "document.write() in data-export.component.ts:68",
      "render_context": "HTML_BODY",
      "encoding_observed": "None",
      "verdict": "vulnerable",
      "mismatch_reason": "User-controlled data written directly to new window via document.write() without sanitization",
      "witness_payload": "<script>alert('export_xss')</script>",
      "confidence": "high",
      "notes": "Requires authenticated user. XSS executes in popup window with exported user data."
    },
    {
      "ID": "XSS-VULN-08",
      "vulnerability_type": "Stored",
      "source": "POST body field: 'profileImage' URL in profile image upload",
      "path": "Profile image URL → CSP header construction → template rendering",
      "sink_function": "CSP header generation in routes/userProfile.ts:87",
      "render_context": "HTML_ATTRIBUTE",
      "encoding_observed": "None - direct URL inclusion in CSP header",
      "verdict": "vulnerable",
      "mismatch_reason": "Profile image URL is directly included in CSP header construction, allowing CSP directive injection",
      "witness_payload": "https://a.png; script-src 'unsafe-inline' 'self'",
      "confidence": "high", 
      "notes": "Enables CSP bypass for other XSS attacks. Part of complex attack chain with username XSS for maximum impact."
    }
  ]
}