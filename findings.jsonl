{"vulnerability_type": "SQL_INJECTION", "location": "/rest/user/login (email and password parameters)", "confidence": "CRITICAL", "impact": "Authentication bypass, unauthorized database access, potential data extraction", "evidence": "Raw SQL query at routes/login.ts:34 uses template literal concatenation without parameterization: SELECT * FROM Users WHERE email = '${req.body.email}' AND password = '${security.hash(req.body.password)}'", "summary": "Critical SQL injection vulnerability in login endpoint allows authentication bypass through email parameter manipulation."}
{"vulnerability_type": "SQL_INJECTION", "location": "/rest/products/search (q query parameter)", "confidence": "CRITICAL", "impact": "Database schema disclosure, data extraction, potential data manipulation", "evidence": "Raw SQL query at routes/search.ts:23 uses template literal concatenation in LIKE patterns: SELECT * FROM Products WHERE ((name LIKE '%${criteria}%' OR description LIKE '%${criteria}%')", "summary": "Critical SQL injection vulnerability in product search endpoint enables UNION-based data extraction."}
{"vulnerability_type": "NOSQL_INJECTION", "location": "/rest/track-order/:id (id path parameter)", "confidence": "CRITICAL", "impact": "MongoDB data access, JavaScript code execution, potential application compromise", "evidence": "MongoDB $where query at routes/trackOrder.ts:18 uses template literal in JavaScript expression: db.ordersCollection.find({ $where: this.orderId === '${id}' })", "summary": "Critical NoSQL injection vulnerability in order tracking endpoint allows JavaScript code execution via MongoDB $where operator."}{"vulnerability_type": "CROSS_SITE_SCRIPTING", "location": "Search functionality via ?q= parameter", "confidence": "HIGH", "impact": "DOM-based XSS allows arbitrary JavaScript execution in user browsers through search queries", "evidence": "Angular sanitizer.bypassSecurityTrustHtml() explicitly bypasses XSS protection in search-result.component.ts:159", "summary": "Critical DOM-based XSS vulnerability in main search functionality allows arbitrary script execution."}
{"vulnerability_type": "CROSS_SITE_SCRIPTING", "location": "/#/search?q=<payload>", "confidence": "CRITICAL", "impact": "DOM-based XSS allows arbitrary JavaScript execution through URL manipulation without authentication", "evidence": "Confirmed working via browser automation: payload <img src=x onerror=alert('DOM_XSS_TEST')> successfully executed alert dialog. Angular sanitizer bypassed via bypassSecurityTrustHtml() in search-result.component.ts:159", "summary": "DOM-based XSS in search functionality enables client-side code execution via URL parameters"}
{"vulnerability_type": "CROSS_SITE_SCRIPTING", "location": "/api/Feedbacks POST endpoint", "confidence": "HIGH", "impact": "Stored XSS affecting administrators and users viewing feedback content when challenge conditions met", "evidence": "Code analysis confirms conditional sanitization bypass in models/feedback.ts:40-56. Single-pass sanitization allows nested tag injection when persistedXssFeedbackChallenge enabled", "summary": "Stored XSS in feedback system with challenge-dependent sanitization bypass"}
{"vulnerability_type": "CROSS_SITE_SCRIPTING", "location": "/rest/user/whoami?callback=<payload>", "confidence": "HIGH", "impact": "JSONP injection enables cross-domain information disclosure and XSS attacks", "evidence": "JSONP endpoint accepts arbitrary callback parameters without validation in routes/currentUser.ts:27. Enables email address and profile data exfiltration", "summary": "JSONP injection vulnerability allows cross-domain data theft and XSS execution"}
{"vulnerability_type": "SERVER_SIDE_TEMPLATE_INJECTION", "location": "Username field in profile updates", "confidence": "CRITICAL", "impact": "Remote code execution on server via Node.js eval() when challenge conditions met", "evidence": "SSTI confirmed in routes/userProfile.ts:62 where username field supports #{...} syntax processed by eval(). Enables arbitrary Node.js code execution", "summary": "Server-Side Template Injection in username field allows remote code execution"}{"vulnerability_type": "AUTHORIZATION_BYPASS", "location": "/rest/basket/:id (id path parameter)", "confidence": "HIGH", "impact": "Any authenticated user can access and modify other users shopping baskets, exposing purchase history and enabling financial manipulation", "evidence": "Missing ownership validation in routes/basket.ts:21-24 - comparison uses loose \!= instead of strict validation allowing bypass", "summary": "IDOR vulnerability in basket endpoint enables cross-user shopping cart access and manipulation"}
{"vulnerability_type": "PRIVILEGE_ESCALATION", "location": "/api/Users POST endpoint", "confidence": "CRITICAL", "impact": "Any user can register with admin role, bypassing all access controls and gaining full administrative privileges over the application", "evidence": "No role validation in user registration at server.ts:496-503 and models/user.ts:84 allows direct admin role injection via role parameter", "summary": "Complete vertical privilege escalation via admin role injection during user registration"}
{"vulnerability_type": "AUTHENTICATION_BYPASS", "location": "JWT token system (lib/insecurity.ts:23)", "confidence": "CRITICAL", "impact": "Complete authentication bypass through JWT token forgery using hardcoded private keys or algorithm confusion attacks", "evidence": "Hardcoded RSA private key exposed in source code enables token forgery, plus vulnerable to algorithm confusion attacks from RS256 to HS256 or none algorithm", "summary": "Fundamental JWT implementation flaws enable complete authentication bypass through multiple attack vectors"}
